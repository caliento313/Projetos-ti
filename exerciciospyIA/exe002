#üß© Programa√ß√£o Funcional e Recursiva.
# Composi√ß√£o de Fun√ß√µes‚Ä¢
# Crie uma fun√ß√£o que retorna uma nova fun√ß√£o equivalente a.
# Teste com fun√ß√µes matem√°ticas e de manipula√ß√£o de strings.


#O que √© composi√ß√£o de fun√ß√µes?
# Compor fun√ß√µes significa criar uma nova fun√ß√£o
# que aplica duas (ou mais) fun√ß√µes em sequ√™ncia.
# Por exemplo, se temos e, a composi√ß√£o
# aplica primeiro e depois.

def compor(f, g):
    return lambda x: f(g(x))
def dobrar(x):
    return x * 2

def somar_cinco(x):
    return x + 5

nova_funcao = compor(dobrar, somar_cinco)
print(nova_funcao(3))  # Resultado: 16 ‚Üí dobrar(somar_cinco(3)) = dobrar(8) = 16
def remover_espacos(s):
    return s.replace(" ", "")

def colocar_maiusculo(s):
    return s.upper()

nova_funcao_str = compor(colocar_maiusculo, remover_espacos)
print(nova_funcao_str("Ol√° mundo"))  # Resultado: "OL√ÅMUNDO"
from functools import reduce

def compor_varias(*funcoes):
    return reduce(lambda f, g: lambda x: f(g(x)), funcoes)

# Exemplo com 3 fun√ß√µes
nova = compor_varias(colocar_maiusculo, remover_espacos, lambda s: s + "!!!")
print(nova("bom dia"))  # Resultado: "BOMDIA!!!"